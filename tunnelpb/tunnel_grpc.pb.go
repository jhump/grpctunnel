// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpctunnel/v1/tunnel.proto

package tunnelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelService_OpenTunnel_FullMethodName        = "/grpctunnel.v1.TunnelService/OpenTunnel"
	TunnelService_OpenReverseTunnel_FullMethodName = "/grpctunnel.v1.TunnelService/OpenReverseTunnel"
)

// TunnelServiceClient is the client API for TunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A gRPC service which can tunnel gRPC traffic from the client to the server or
// even the server to the client. A "tunnel" is a gRPC stream which presents
// itself as a gRPC transport -- over which other streams may be multiplexed.
//
// Note that evolution of features in this service relies on the client and
// server negotiating a "protocol revision". This negotiation step was not
// originally present, and was added in revision one, which also includes
// support for flow control, which fixes several classes of deadlock that
// can occur in heavy usage of streams on the tunnel.
//
// Revision one also advertises that clients can accept server settings and
// that servers intend to send them via headers. This is done by sending a
// header named "grpctunnel-negotiate" with a value of "on", both in request
// headers from a network client and in response headers from a network
// server, on the RPC that establishes the tunnel.
//
// Both the client and server must advertise this ability in order for a
// server settings message to actually be sent. Otherwise, clients and servers
// that implement revision one will fall back to a revision zero compatibility
// mode. (Revision zero supports neither server settings messages nor flow
// control.)
//
// As features are added to the protocol in future revisions, they will be
// enabled via the client and server negotiating them via the server settings
// message. The server announces what protocol revisions it supports, so the
// client can fall back to older revisions if the server doesn't support the
// latest. The client indicates the actual revision it will use in messages
// that create new streams.
type TunnelServiceClient interface {
	// OpenTunnel creates a channel to the server which can be used to send
	// additional RPCs, all of which will be sent to the same server via a
	// single underlying gRPC stream. This can provide affinity for a "chatty"
	// sequence of calls, where the gRPC connection is load balanced (so there
	// may be multiple backend servers), but a particular "conversation" (which
	// may consist of numerous RPCs) needs to all go to a single server, for
	// consistency.
	OpenTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToServer, ServerToClient], error)
	// OpenReverseTunnel creates a "reverse" channel, which allows the server to
	// act as a client and send RPCs to the client that creates the tunnel. It
	// is in most respects identical to OpenTunnel except that the roles are
	// reversed: the server initiates RPCs and sends requests and the client
	// replies to them and sends responses.
	OpenReverseTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServerToClient, ClientToServer], error)
}

type tunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelServiceClient(cc grpc.ClientConnInterface) TunnelServiceClient {
	return &tunnelServiceClient{cc}
}

func (c *tunnelServiceClient) OpenTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToServer, ServerToClient], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[0], TunnelService_OpenTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientToServer, ServerToClient]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_OpenTunnelClient = grpc.BidiStreamingClient[ClientToServer, ServerToClient]

func (c *tunnelServiceClient) OpenReverseTunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ServerToClient, ClientToServer], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelService_ServiceDesc.Streams[1], TunnelService_OpenReverseTunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerToClient, ClientToServer]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_OpenReverseTunnelClient = grpc.BidiStreamingClient[ServerToClient, ClientToServer]

// TunnelServiceServer is the server API for TunnelService service.
// All implementations must embed UnimplementedTunnelServiceServer
// for forward compatibility.
//
// A gRPC service which can tunnel gRPC traffic from the client to the server or
// even the server to the client. A "tunnel" is a gRPC stream which presents
// itself as a gRPC transport -- over which other streams may be multiplexed.
//
// Note that evolution of features in this service relies on the client and
// server negotiating a "protocol revision". This negotiation step was not
// originally present, and was added in revision one, which also includes
// support for flow control, which fixes several classes of deadlock that
// can occur in heavy usage of streams on the tunnel.
//
// Revision one also advertises that clients can accept server settings and
// that servers intend to send them via headers. This is done by sending a
// header named "grpctunnel-negotiate" with a value of "on", both in request
// headers from a network client and in response headers from a network
// server, on the RPC that establishes the tunnel.
//
// Both the client and server must advertise this ability in order for a
// server settings message to actually be sent. Otherwise, clients and servers
// that implement revision one will fall back to a revision zero compatibility
// mode. (Revision zero supports neither server settings messages nor flow
// control.)
//
// As features are added to the protocol in future revisions, they will be
// enabled via the client and server negotiating them via the server settings
// message. The server announces what protocol revisions it supports, so the
// client can fall back to older revisions if the server doesn't support the
// latest. The client indicates the actual revision it will use in messages
// that create new streams.
type TunnelServiceServer interface {
	// OpenTunnel creates a channel to the server which can be used to send
	// additional RPCs, all of which will be sent to the same server via a
	// single underlying gRPC stream. This can provide affinity for a "chatty"
	// sequence of calls, where the gRPC connection is load balanced (so there
	// may be multiple backend servers), but a particular "conversation" (which
	// may consist of numerous RPCs) needs to all go to a single server, for
	// consistency.
	OpenTunnel(grpc.BidiStreamingServer[ClientToServer, ServerToClient]) error
	// OpenReverseTunnel creates a "reverse" channel, which allows the server to
	// act as a client and send RPCs to the client that creates the tunnel. It
	// is in most respects identical to OpenTunnel except that the roles are
	// reversed: the server initiates RPCs and sends requests and the client
	// replies to them and sends responses.
	OpenReverseTunnel(grpc.BidiStreamingServer[ServerToClient, ClientToServer]) error
	mustEmbedUnimplementedTunnelServiceServer()
}

// UnimplementedTunnelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelServiceServer struct{}

func (UnimplementedTunnelServiceServer) OpenTunnel(grpc.BidiStreamingServer[ClientToServer, ServerToClient]) error {
	return status.Errorf(codes.Unimplemented, "method OpenTunnel not implemented")
}
func (UnimplementedTunnelServiceServer) OpenReverseTunnel(grpc.BidiStreamingServer[ServerToClient, ClientToServer]) error {
	return status.Errorf(codes.Unimplemented, "method OpenReverseTunnel not implemented")
}
func (UnimplementedTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {}
func (UnimplementedTunnelServiceServer) testEmbeddedByValue()                       {}

// UnsafeTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServiceServer will
// result in compilation errors.
type UnsafeTunnelServiceServer interface {
	mustEmbedUnimplementedTunnelServiceServer()
}

func RegisterTunnelServiceServer(s grpc.ServiceRegistrar, srv TunnelServiceServer) {
	// If the following call pancis, it indicates UnimplementedTunnelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelService_ServiceDesc, srv)
}

func _TunnelService_OpenTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).OpenTunnel(&grpc.GenericServerStream[ClientToServer, ServerToClient]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_OpenTunnelServer = grpc.BidiStreamingServer[ClientToServer, ServerToClient]

func _TunnelService_OpenReverseTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServiceServer).OpenReverseTunnel(&grpc.GenericServerStream[ServerToClient, ClientToServer]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelService_OpenReverseTunnelServer = grpc.BidiStreamingServer[ServerToClient, ClientToServer]

// TunnelService_ServiceDesc is the grpc.ServiceDesc for TunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctunnel.v1.TunnelService",
	HandlerType: (*TunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenTunnel",
			Handler:       _TunnelService_OpenTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OpenReverseTunnel",
			Handler:       _TunnelService_OpenReverseTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpctunnel/v1/tunnel.proto",
}
