// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: grpctunnel/v1/tunnel.proto

package tunnelpb

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolRevision int32

const (
	// Indicates revision zero. This revision of the protocol did not support
	// server settings messages or window update messages. Flow control was not
	// enforced. This version of the protocol did not even know about protocol
	// revisions, so by default any ProtocolRevision field will be absent (and
	// thus default to REVISION_ZERO). A server can identify a revision zero client
	// because it will not send a "grpctunnel-negotiate" request header, and thus
	// the server knows to not send a settings message and to not use flow control.
	// A client can identify a revision zero server because it will not send a
	// "grpctunnel-negotiate" response header, and thus the client knows not to
	// expect a settings message and to not use flow control.
	ProtocolRevision_REVISION_ZERO ProtocolRevision = 0
	// Indicates revision one, which requires server-supplied settings before the
	// tunnel can be used and also supports flow control. This flow control support
	// eliminates chances of deadlock in streaming-heavy tunnel usage.
	//
	// This value will be provided via messages on the tunnel, even though it is
	// technically redundant with the use of the "grpctunnel-negotiation" header.
	// It will be used in the future to distinguish between this protocol revision
	// and later protocol revisions.
	ProtocolRevision_REVISION_ONE ProtocolRevision = 1
)

// Enum value maps for ProtocolRevision.
var (
	ProtocolRevision_name = map[int32]string{
		0: "REVISION_ZERO",
		1: "REVISION_ONE",
	}
	ProtocolRevision_value = map[string]int32{
		"REVISION_ZERO": 0,
		"REVISION_ONE":  1,
	}
)

func (x ProtocolRevision) Enum() *ProtocolRevision {
	p := new(ProtocolRevision)
	*p = x
	return p
}

func (x ProtocolRevision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolRevision) Descriptor() protoreflect.EnumDescriptor {
	return file_grpctunnel_v1_tunnel_proto_enumTypes[0].Descriptor()
}

func (ProtocolRevision) Type() protoreflect.EnumType {
	return &file_grpctunnel_v1_tunnel_proto_enumTypes[0]
}

func (x ProtocolRevision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolRevision.Descriptor instead.
func (ProtocolRevision) EnumDescriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{0}
}

// ClientToServer is the message a client sends to a server.
//
// For a single stream ID, the first such message must include the new_stream
// field. After that, there can be any number of requests sent, via the
// request_message field and additional messages thereafter that use the
// more_request_data field (for requests that are larger than 16kb). And
// finally, the RPC ends with either the half_close or cancel fields. If the
// half_close field is used, the RPC stream remains active so the server may
// continue to send response data. But, if the cancel field is used, the RPC
// stream is aborted and thus closed on both client and server ends. If a stream
// has been half-closed, the only allowed message from the client for that
// stream ID is one with the cancel field, to abort the remainder of the
// operation.
type ClientToServer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the stream. Stream IDs must be used in increasing order and
	// cannot be re-used. Unlike in the HTTP/2 protocol, the stream ID is 64-bit
	// so overflow in a long-lived channel is excessively unlikely. (If the
	// channel were used for a new stream every nanosecond, it would take close
	// to 300 years to exhaust every ID and reach an overflow situation.)
	StreamId int64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Types that are valid to be assigned to Frame:
	//
	//	*ClientToServer_NewStream
	//	*ClientToServer_RequestMessage
	//	*ClientToServer_MoreRequestData
	//	*ClientToServer_HalfClose
	//	*ClientToServer_Cancel
	//	*ClientToServer_WindowUpdate
	Frame         isClientToServer_Frame `protobuf_oneof:"frame"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *ClientToServer) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *ClientToServer) GetFrame() isClientToServer_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *ClientToServer) GetNewStream() *NewStream {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_NewStream); ok {
			return x.NewStream
		}
	}
	return nil
}

func (x *ClientToServer) GetRequestMessage() *MessageData {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_RequestMessage); ok {
			return x.RequestMessage
		}
	}
	return nil
}

func (x *ClientToServer) GetMoreRequestData() []byte {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_MoreRequestData); ok {
			return x.MoreRequestData
		}
	}
	return nil
}

func (x *ClientToServer) GetHalfClose() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_HalfClose); ok {
			return x.HalfClose
		}
	}
	return nil
}

func (x *ClientToServer) GetCancel() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_Cancel); ok {
			return x.Cancel
		}
	}
	return nil
}

func (x *ClientToServer) GetWindowUpdate() uint32 {
	if x != nil {
		if x, ok := x.Frame.(*ClientToServer_WindowUpdate); ok {
			return x.WindowUpdate
		}
	}
	return 0
}

type isClientToServer_Frame interface {
	isClientToServer_Frame()
}

type ClientToServer_NewStream struct {
	// Creates a new RPC stream, which includes request header metadata. The
	// stream ID must be greater than all previously-used stream IDs for this
	// tunnel. It is expected to start at zero for the first stream on the
	// tunnel and then one for the next, and so on.
	NewStream *NewStream `protobuf:"bytes,2,opt,name=new_stream,json=newStream,proto3,oneof"`
}

type ClientToServer_RequestMessage struct {
	// Sends a message on the RPC stream. If the message is larger than 16k,
	// the rest of the message should be sent in chunks using the
	// more_request_data field (up to 16kb of data in each chunk).
	RequestMessage *MessageData `protobuf:"bytes,3,opt,name=request_message,json=requestMessage,proto3,oneof"`
}

type ClientToServer_MoreRequestData struct {
	// Sends a chunk of request data, for a request message that could not
	// wholly fit in a request_message field (e.g. > 16kb).
	MoreRequestData []byte `protobuf:"bytes,4,opt,name=more_request_data,json=moreRequestData,proto3,oneof"`
}

type ClientToServer_HalfClose struct {
	// Half-closes the stream, signaling that no more request messages will
	// be sent. No other messages, other than one with the cancel field set,
	// should be sent for this stream (at least not until it is terminated
	// by the server, after which the ID can be re-used).
	HalfClose *emptypb.Empty `protobuf:"bytes,5,opt,name=half_close,json=halfClose,proto3,oneof"`
}

type ClientToServer_Cancel struct {
	// Aborts the stream. No other messages should be sent for this stream
	// (unless the ID is being re-used after the stream is terminated on the
	// server side).
	Cancel *emptypb.Empty `protobuf:"bytes,6,opt,name=cancel,proto3,oneof"`
}

type ClientToServer_WindowUpdate struct {
	// Lets the peer know that data has been consumed, so it may be able
	// to send more data, based on flow control window sizes. This is only
	// used in revision one of the protocol.
	WindowUpdate uint32 `protobuf:"varint,7,opt,name=window_update,json=windowUpdate,proto3,oneof"`
}

func (*ClientToServer_NewStream) isClientToServer_Frame() {}

func (*ClientToServer_RequestMessage) isClientToServer_Frame() {}

func (*ClientToServer_MoreRequestData) isClientToServer_Frame() {}

func (*ClientToServer_HalfClose) isClientToServer_Frame() {}

func (*ClientToServer_Cancel) isClientToServer_Frame() {}

func (*ClientToServer_WindowUpdate) isClientToServer_Frame() {}

// ServerToClient is the message a server sends to a client.
//
// For a single stream ID, the first such message should include the
// response_headers field unless no headers are to be sent. After the headers,
// the server can send any number of responses, via the response_message field
// and additional messages thereafter that use the more_response_data field (for
// responses that are larger than 16kb). A message with the close_stream field
// concludes the stream, whether it terminates successfully or with an error.
type ServerToClient struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the stream. Stream IDs are defined by the client and should be
	// used in monotonically increasing order. They cannot be re-used. Unlike
	// HTTP/2, the ID is 64-bit, so overflow/re-use should not be an issue. (If
	// the channel were used for a new stream every nanosecond, it would take
	// close to 300 years to exhaust every ID and reach an overflow situation.)
	//
	// The stream ID will be -1 for messages that do not correspond to a single
	// stream, but to the whole tunnel. Currently, only a Settings message will
	// be sent this way.
	StreamId int64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Types that are valid to be assigned to Frame:
	//
	//	*ServerToClient_Settings
	//	*ServerToClient_ResponseHeaders
	//	*ServerToClient_ResponseMessage
	//	*ServerToClient_MoreResponseData
	//	*ServerToClient_CloseStream
	//	*ServerToClient_WindowUpdate
	Frame         isServerToClient_Frame `protobuf_oneof:"frame"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *ServerToClient) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *ServerToClient) GetFrame() isServerToClient_Frame {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *ServerToClient) GetSettings() *Settings {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_Settings); ok {
			return x.Settings
		}
	}
	return nil
}

func (x *ServerToClient) GetResponseHeaders() *Metadata {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_ResponseHeaders); ok {
			return x.ResponseHeaders
		}
	}
	return nil
}

func (x *ServerToClient) GetResponseMessage() *MessageData {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_ResponseMessage); ok {
			return x.ResponseMessage
		}
	}
	return nil
}

func (x *ServerToClient) GetMoreResponseData() []byte {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_MoreResponseData); ok {
			return x.MoreResponseData
		}
	}
	return nil
}

func (x *ServerToClient) GetCloseStream() *CloseStream {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_CloseStream); ok {
			return x.CloseStream
		}
	}
	return nil
}

func (x *ServerToClient) GetWindowUpdate() uint32 {
	if x != nil {
		if x, ok := x.Frame.(*ServerToClient_WindowUpdate); ok {
			return x.WindowUpdate
		}
	}
	return 0
}

type isServerToClient_Frame interface {
	isServerToClient_Frame()
}

type ServerToClient_Settings struct {
	// This is the very first message sent on a response stream. The tunnel
	// client should await this before sending any data as it will contain
	// information about the server's initial flow control window size for
	// each new stream. This is only used in revision one of the protocol.
	// A client that needs to interact with an older server (i.e. revision
	// zero) must examine header metadata to decide if it should expect a
	// settings message. Similarly, a server must examine header metadata to
	// decide if it should send a settings message.
	Settings *Settings `protobuf:"bytes,6,opt,name=settings,proto3,oneof"`
}

type ServerToClient_ResponseHeaders struct {
	// Sends response headers for this stream. If headers are sent at all,
	// they must be sent before any response message data.
	ResponseHeaders *Metadata `protobuf:"bytes,2,opt,name=response_headers,json=responseHeaders,proto3,oneof"`
}

type ServerToClient_ResponseMessage struct {
	// Sends a message on the RPC stream. If the message is larger than 16k,
	// the rest of the message should be sent in chunks using the
	// more_response_data field (up to 16kb of data in each chunk).
	ResponseMessage *MessageData `protobuf:"bytes,3,opt,name=response_message,json=responseMessage,proto3,oneof"`
}

type ServerToClient_MoreResponseData struct {
	// Sends a chunk of response data, for a response message that could not
	// wholly fit in a response_message field (e.g. > 16kb).
	MoreResponseData []byte `protobuf:"bytes,4,opt,name=more_response_data,json=moreResponseData,proto3,oneof"`
}

type ServerToClient_CloseStream struct {
	// Terminates the stream and communicates the final disposition to the
	// client. After the stream is closed, no other messages should use the
	// given stream ID until the ID is re-used (e.g. a NewStream message is
	// received that creates another stream with the same ID).
	CloseStream *CloseStream `protobuf:"bytes,5,opt,name=close_stream,json=closeStream,proto3,oneof"`
}

type ServerToClient_WindowUpdate struct {
	// Lets the peer know that data has been consumed, so it may be able
	// to send more data, based on flow control window sizes.
	WindowUpdate uint32 `protobuf:"varint,7,opt,name=window_update,json=windowUpdate,proto3,oneof"`
}

func (*ServerToClient_Settings) isServerToClient_Frame() {}

func (*ServerToClient_ResponseHeaders) isServerToClient_Frame() {}

func (*ServerToClient_ResponseMessage) isServerToClient_Frame() {}

func (*ServerToClient_MoreResponseData) isServerToClient_Frame() {}

func (*ServerToClient_CloseStream) isServerToClient_Frame() {}

func (*ServerToClient_WindowUpdate) isServerToClient_Frame() {}

type Settings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of protocol revisions that this server supports. If the
	// client does not support any of them, it must hang up. This should
	// never be empty, but if that is observed, the client should assume
	// the server only supports revision zero.
	SupportedProtocolRevisions []ProtocolRevision `protobuf:"varint,1,rep,packed,name=supported_protocol_revisions,json=supportedProtocolRevisions,proto3,enum=grpctunnel.v1.ProtocolRevision" json:"supported_protocol_revisions,omitempty"`
	// The server's initial window size for all newly created streams.
	// When a new stream is created, this is the flow control window for
	// sending data to the server. The client indicates its own initial
	// window size, for receiving data from the server, in the NewStream
	// message.
	//
	// This value will be zero if the only supported protocol revision
	// is zero.
	InitialWindowSize uint32 `protobuf:"varint,2,opt,name=initial_window_size,json=initialWindowSize,proto3" json:"initial_window_size,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *Settings) GetSupportedProtocolRevisions() []ProtocolRevision {
	if x != nil {
		return x.SupportedProtocolRevisions
	}
	return nil
}

func (x *Settings) GetInitialWindowSize() uint32 {
	if x != nil {
		return x.InitialWindowSize
	}
	return 0
}

type NewStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the method being invoked.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// Header metadata for this request.
	RequestHeaders *Metadata `protobuf:"bytes,2,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	// The client's initial window size, for receiving data from the
	// server. This will be zero if protocol_revision is zero.
	InitialWindowSize uint32 `protobuf:"varint,3,opt,name=initial_window_size,json=initialWindowSize,proto3" json:"initial_window_size,omitempty"`
	// The protocol revision that the client will use for this stream.
	// If this revision is not supported by the server, the server will
	// immediately close the stream with an error code.
	ProtocolRevision ProtocolRevision `protobuf:"varint,4,opt,name=protocol_revision,json=protocolRevision,proto3,enum=grpctunnel.v1.ProtocolRevision" json:"protocol_revision,omitempty"` // TODO: codec/compressor options?
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NewStream) Reset() {
	*x = NewStream{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStream) ProtoMessage() {}

func (x *NewStream) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStream.ProtoReflect.Descriptor instead.
func (*NewStream) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *NewStream) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *NewStream) GetRequestHeaders() *Metadata {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *NewStream) GetInitialWindowSize() uint32 {
	if x != nil {
		return x.InitialWindowSize
	}
	return 0
}

func (x *NewStream) GetProtocolRevision() ProtocolRevision {
	if x != nil {
		return x.ProtocolRevision
	}
	return ProtocolRevision_REVISION_ZERO
}

type MessageData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full size of the message.
	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The message data. This field should not be longer than 16kb (16,384
	// bytes). If the full size of the message is larger then it should be
	// split into multiple chunks. The chunking is done to allow multiple
	// access to the underlying gRPC stream by concurrent tunneled streams.
	// If very large messages were sent via a single chunk, it could cause
	// head-of-line blocking and starvation when multiple streams need to send
	// data on the one underlying gRPC stream.
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *MessageData) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CloseStream struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ResponseTrailers *Metadata              `protobuf:"bytes,1,opt,name=response_trailers,json=responseTrailers,proto3" json:"response_trailers,omitempty"`
	Status           *status.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CloseStream) Reset() {
	*x = CloseStream{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStream) ProtoMessage() {}

func (x *CloseStream) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStream.ProtoReflect.Descriptor instead.
func (*CloseStream) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *CloseStream) GetResponseTrailers() *Metadata {
	if x != nil {
		return x.ResponseTrailers
	}
	return nil
}

func (x *CloseStream) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Md            map[string]*Metadata_Values `protobuf:"bytes,1,rep,name=md,proto3" json:"md,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *Metadata) GetMd() map[string]*Metadata_Values {
	if x != nil {
		return x.Md
	}
	return nil
}

type Metadata_Values struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           []string               `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata_Values) Reset() {
	*x = Metadata_Values{}
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Values) ProtoMessage() {}

func (x *Metadata_Values) ProtoReflect() protoreflect.Message {
	mi := &file_grpctunnel_v1_tunnel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Values.ProtoReflect.Descriptor instead.
func (*Metadata_Values) Descriptor() ([]byte, []int) {
	return file_grpctunnel_v1_tunnel_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Metadata_Values) GetVal() []string {
	if x != nil {
		return x.Val
	}
	return nil
}

var File_grpctunnel_v1_tunnel_proto protoreflect.FileDescriptor

const file_grpctunnel_v1_tunnel_proto_rawDesc = "" +
	"\n" +
	"\x1agrpctunnel/v1/tunnel.proto\x12\rgrpctunnel.v1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x17google/rpc/status.proto\"\xf8\x02\n" +
	"\x0eClientToServer\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x03R\bstreamId\x129\n" +
	"\n" +
	"new_stream\x18\x02 \x01(\v2\x18.grpctunnel.v1.NewStreamH\x00R\tnewStream\x12E\n" +
	"\x0frequest_message\x18\x03 \x01(\v2\x1a.grpctunnel.v1.MessageDataH\x00R\x0erequestMessage\x12,\n" +
	"\x11more_request_data\x18\x04 \x01(\fH\x00R\x0fmoreRequestData\x127\n" +
	"\n" +
	"half_close\x18\x05 \x01(\v2\x16.google.protobuf.EmptyH\x00R\thalfClose\x120\n" +
	"\x06cancel\x18\x06 \x01(\v2\x16.google.protobuf.EmptyH\x00R\x06cancel\x12%\n" +
	"\rwindow_update\x18\a \x01(\rH\x00R\fwindowUpdateB\a\n" +
	"\x05frame\"\x94\x03\n" +
	"\x0eServerToClient\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x03R\bstreamId\x125\n" +
	"\bsettings\x18\x06 \x01(\v2\x17.grpctunnel.v1.SettingsH\x00R\bsettings\x12D\n" +
	"\x10response_headers\x18\x02 \x01(\v2\x17.grpctunnel.v1.MetadataH\x00R\x0fresponseHeaders\x12G\n" +
	"\x10response_message\x18\x03 \x01(\v2\x1a.grpctunnel.v1.MessageDataH\x00R\x0fresponseMessage\x12.\n" +
	"\x12more_response_data\x18\x04 \x01(\fH\x00R\x10moreResponseData\x12?\n" +
	"\fclose_stream\x18\x05 \x01(\v2\x1a.grpctunnel.v1.CloseStreamH\x00R\vcloseStream\x12%\n" +
	"\rwindow_update\x18\a \x01(\rH\x00R\fwindowUpdateB\a\n" +
	"\x05frame\"\x9d\x01\n" +
	"\bSettings\x12a\n" +
	"\x1csupported_protocol_revisions\x18\x01 \x03(\x0e2\x1f.grpctunnel.v1.ProtocolRevisionR\x1asupportedProtocolRevisions\x12.\n" +
	"\x13initial_window_size\x18\x02 \x01(\rR\x11initialWindowSize\"\xec\x01\n" +
	"\tNewStream\x12\x1f\n" +
	"\vmethod_name\x18\x01 \x01(\tR\n" +
	"methodName\x12@\n" +
	"\x0frequest_headers\x18\x02 \x01(\v2\x17.grpctunnel.v1.MetadataR\x0erequestHeaders\x12.\n" +
	"\x13initial_window_size\x18\x03 \x01(\rR\x11initialWindowSize\x12L\n" +
	"\x11protocol_revision\x18\x04 \x01(\x0e2\x1f.grpctunnel.v1.ProtocolRevisionR\x10protocolRevision\"5\n" +
	"\vMessageData\x12\x12\n" +
	"\x04size\x18\x01 \x01(\rR\x04size\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"\x7f\n" +
	"\vCloseStream\x12D\n" +
	"\x11response_trailers\x18\x01 \x01(\v2\x17.grpctunnel.v1.MetadataR\x10responseTrailers\x12*\n" +
	"\x06status\x18\x02 \x01(\v2\x12.google.rpc.StatusR\x06status\"\xae\x01\n" +
	"\bMetadata\x12/\n" +
	"\x02md\x18\x01 \x03(\v2\x1f.grpctunnel.v1.Metadata.MdEntryR\x02md\x1a\x1a\n" +
	"\x06Values\x12\x10\n" +
	"\x03val\x18\x01 \x03(\tR\x03val\x1aU\n" +
	"\aMdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.grpctunnel.v1.Metadata.ValuesR\x05value:\x028\x01*7\n" +
	"\x10ProtocolRevision\x12\x11\n" +
	"\rREVISION_ZERO\x10\x00\x12\x10\n" +
	"\fREVISION_ONE\x10\x012\xb6\x01\n" +
	"\rTunnelService\x12N\n" +
	"\n" +
	"OpenTunnel\x12\x1d.grpctunnel.v1.ClientToServer\x1a\x1d.grpctunnel.v1.ServerToClient(\x010\x01\x12U\n" +
	"\x11OpenReverseTunnel\x12\x1d.grpctunnel.v1.ServerToClient\x1a\x1d.grpctunnel.v1.ClientToServer(\x010\x01B&Z$github.com/jhump/grpctunnel/tunnelpbb\x06proto3"

var (
	file_grpctunnel_v1_tunnel_proto_rawDescOnce sync.Once
	file_grpctunnel_v1_tunnel_proto_rawDescData []byte
)

func file_grpctunnel_v1_tunnel_proto_rawDescGZIP() []byte {
	file_grpctunnel_v1_tunnel_proto_rawDescOnce.Do(func() {
		file_grpctunnel_v1_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpctunnel_v1_tunnel_proto_rawDesc), len(file_grpctunnel_v1_tunnel_proto_rawDesc)))
	})
	return file_grpctunnel_v1_tunnel_proto_rawDescData
}

var file_grpctunnel_v1_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpctunnel_v1_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_grpctunnel_v1_tunnel_proto_goTypes = []any{
	(ProtocolRevision)(0),   // 0: grpctunnel.v1.ProtocolRevision
	(*ClientToServer)(nil),  // 1: grpctunnel.v1.ClientToServer
	(*ServerToClient)(nil),  // 2: grpctunnel.v1.ServerToClient
	(*Settings)(nil),        // 3: grpctunnel.v1.Settings
	(*NewStream)(nil),       // 4: grpctunnel.v1.NewStream
	(*MessageData)(nil),     // 5: grpctunnel.v1.MessageData
	(*CloseStream)(nil),     // 6: grpctunnel.v1.CloseStream
	(*Metadata)(nil),        // 7: grpctunnel.v1.Metadata
	(*Metadata_Values)(nil), // 8: grpctunnel.v1.Metadata.Values
	nil,                     // 9: grpctunnel.v1.Metadata.MdEntry
	(*emptypb.Empty)(nil),   // 10: google.protobuf.Empty
	(*status.Status)(nil),   // 11: google.rpc.Status
}
var file_grpctunnel_v1_tunnel_proto_depIdxs = []int32{
	4,  // 0: grpctunnel.v1.ClientToServer.new_stream:type_name -> grpctunnel.v1.NewStream
	5,  // 1: grpctunnel.v1.ClientToServer.request_message:type_name -> grpctunnel.v1.MessageData
	10, // 2: grpctunnel.v1.ClientToServer.half_close:type_name -> google.protobuf.Empty
	10, // 3: grpctunnel.v1.ClientToServer.cancel:type_name -> google.protobuf.Empty
	3,  // 4: grpctunnel.v1.ServerToClient.settings:type_name -> grpctunnel.v1.Settings
	7,  // 5: grpctunnel.v1.ServerToClient.response_headers:type_name -> grpctunnel.v1.Metadata
	5,  // 6: grpctunnel.v1.ServerToClient.response_message:type_name -> grpctunnel.v1.MessageData
	6,  // 7: grpctunnel.v1.ServerToClient.close_stream:type_name -> grpctunnel.v1.CloseStream
	0,  // 8: grpctunnel.v1.Settings.supported_protocol_revisions:type_name -> grpctunnel.v1.ProtocolRevision
	7,  // 9: grpctunnel.v1.NewStream.request_headers:type_name -> grpctunnel.v1.Metadata
	0,  // 10: grpctunnel.v1.NewStream.protocol_revision:type_name -> grpctunnel.v1.ProtocolRevision
	7,  // 11: grpctunnel.v1.CloseStream.response_trailers:type_name -> grpctunnel.v1.Metadata
	11, // 12: grpctunnel.v1.CloseStream.status:type_name -> google.rpc.Status
	9,  // 13: grpctunnel.v1.Metadata.md:type_name -> grpctunnel.v1.Metadata.MdEntry
	8,  // 14: grpctunnel.v1.Metadata.MdEntry.value:type_name -> grpctunnel.v1.Metadata.Values
	1,  // 15: grpctunnel.v1.TunnelService.OpenTunnel:input_type -> grpctunnel.v1.ClientToServer
	2,  // 16: grpctunnel.v1.TunnelService.OpenReverseTunnel:input_type -> grpctunnel.v1.ServerToClient
	2,  // 17: grpctunnel.v1.TunnelService.OpenTunnel:output_type -> grpctunnel.v1.ServerToClient
	1,  // 18: grpctunnel.v1.TunnelService.OpenReverseTunnel:output_type -> grpctunnel.v1.ClientToServer
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_grpctunnel_v1_tunnel_proto_init() }
func file_grpctunnel_v1_tunnel_proto_init() {
	if File_grpctunnel_v1_tunnel_proto != nil {
		return
	}
	file_grpctunnel_v1_tunnel_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientToServer_NewStream)(nil),
		(*ClientToServer_RequestMessage)(nil),
		(*ClientToServer_MoreRequestData)(nil),
		(*ClientToServer_HalfClose)(nil),
		(*ClientToServer_Cancel)(nil),
		(*ClientToServer_WindowUpdate)(nil),
	}
	file_grpctunnel_v1_tunnel_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerToClient_Settings)(nil),
		(*ServerToClient_ResponseHeaders)(nil),
		(*ServerToClient_ResponseMessage)(nil),
		(*ServerToClient_MoreResponseData)(nil),
		(*ServerToClient_CloseStream)(nil),
		(*ServerToClient_WindowUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpctunnel_v1_tunnel_proto_rawDesc), len(file_grpctunnel_v1_tunnel_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpctunnel_v1_tunnel_proto_goTypes,
		DependencyIndexes: file_grpctunnel_v1_tunnel_proto_depIdxs,
		EnumInfos:         file_grpctunnel_v1_tunnel_proto_enumTypes,
		MessageInfos:      file_grpctunnel_v1_tunnel_proto_msgTypes,
	}.Build()
	File_grpctunnel_v1_tunnel_proto = out.File
	file_grpctunnel_v1_tunnel_proto_goTypes = nil
	file_grpctunnel_v1_tunnel_proto_depIdxs = nil
}
